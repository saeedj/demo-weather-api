package com.example.weather.service;import com.example.weather.exception.RateLimitException;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.junit.jupiter.MockitoExtension;import static org.hamcrest.MatcherAssert.assertThat;import static org.junit.jupiter.api.Assertions.assertThrows;@ExtendWith(MockitoExtension.class)class ApiUsageServiceTest {    private ApiUsageService apiUsageService;    @BeforeEach    public void setUp() {        apiUsageService = new ApiUsageService();    }    @Test    public void checkRateLimit_whenAnyValidPlanSelectedAndThereAreAvailableBuckets_succeeds() {        String apiKeyForBasicOnePlan = "b1-anyNumberOrString";        apiUsageService.checkRateLimit(apiKeyForBasicOnePlan);        long expectedAvailableBucket = ApiUsagePlan.PLAN_BASIC_ONE.bucketCapacity() - 1;        assertThat(apiUsageService.getBucket().getAvailableTokens(), CoreMatchers.is(expectedAvailableBucket));    }    @Test    public void checkRateLimit_whenNoValidPlanSelectedAndThereAreAvailableBuckets_proceedsWithFreePlan() {        String apiKeyForFreePlan = "F-freePlan";        apiUsageService.checkRateLimit(apiKeyForFreePlan);        long expectedAvailableBucket = ApiUsagePlan.PLAN_FREE.bucketCapacity() - 1;        assertThat(apiUsageService.getBucket().getAvailableTokens(), CoreMatchers.is(expectedAvailableBucket));    }    @Test    public void checkRateLimit_whenExceedsTheRateLimit_throwsRateLimitException() {        String apiKeyForFreePlan = "F-freePlan";        apiUsageService.checkRateLimit(apiKeyForFreePlan);        long expectedAvailableBucket = ApiUsagePlan.PLAN_FREE.bucketCapacity() - 1;        assertThat(apiUsageService.getBucket().getAvailableTokens(), CoreMatchers.is(expectedAvailableBucket));        assertThrows(RateLimitException.class, () ->                apiUsageService.checkRateLimit(apiKeyForFreePlan)        );    }}