package com.example.weather.service.internal;import com.example.weather.dto.WeatherExternalResponseDTO;import com.example.weather.exception.DataNotFoundException;import com.example.weather.exception.DownstreamException;import com.example.weather.model.WeatherRequest;import com.example.weather.model.WeatherResponse;import com.example.weather.repository.WeatherEntity;import com.example.weather.repository.WeatherForecastEntity;import com.example.weather.repository.WeatherForecastRepository;import com.example.weather.service.external.WeatherExternalService;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import java.util.Optional;import static org.hamcrest.MatcherAssert.assertThat;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.doReturn;import static org.mockito.Mockito.doThrow;@ExtendWith(MockitoExtension.class)class WeatherInternalServiceTest {    @Mock    private WeatherExternalService weatherExternalService;    @Mock    private WeatherForecastRepository weatherForecastRepository;    @InjectMocks    private WeatherInternalService weatherInternalService;    @Test    public void getLiveData_whenExternalServiceThrowsException_throwsDownstreamException() {        doThrow(DownstreamException.class).when(weatherExternalService).getFromExternalAPI(any());        WeatherRequest weatherRequest = WeatherRequest.builder().city("city").country("country").build();        assertThrows(DownstreamException.class, () -> {            weatherInternalService.getLiveData(weatherRequest);        });    }    @Test    public void getLiveData_whenExternalServiceReturnsNoData_throwsDataNotFound() {        doReturn(null).when(weatherExternalService).getFromExternalAPI(any());        WeatherRequest weatherRequest = WeatherRequest.builder().city("city").country("country").build();        assertThrows(DataNotFoundException.class, () -> {            weatherInternalService.getLiveData(weatherRequest);        });    }    @Test    public void getLiveData_whenDataAlreadyExistInDB_returnsSameDataFromDB() {        String responseId = "response id";        WeatherExternalResponseDTO expectedExternalResponse = WeatherExternalResponseDTO.builder().responseId(responseId).build();        doReturn(expectedExternalResponse).when(weatherExternalService).getFromExternalAPI(any());        Long refId = 1L;        String description = "description";        WeatherForecastEntity weatherForecastEntity = anyWeatherForecastEntity(refId, responseId, description);        doReturn(Optional.of(weatherForecastEntity)).when(weatherForecastRepository).findByResponseId(responseId);        WeatherRequest weatherRequest = WeatherRequest.builder().city("city").country("country").build();        WeatherResponse result = weatherInternalService.getLiveData(weatherRequest);        assertThat(result.getDescription(), CoreMatchers.is(description));    }    @Test    public void getLiveData_whenDataNotExistInDB_savesAndReturnsSavedDataFromDB() {        String responseId = "response id";        WeatherExternalResponseDTO expectedExternalResponse = WeatherExternalResponseDTO.builder().responseId(responseId).build();        doReturn(expectedExternalResponse).when(weatherExternalService).getFromExternalAPI(any());        doReturn(Optional.empty()).when(weatherForecastRepository).findByResponseId(responseId);        Long refId = 1L;        String description = "description";        WeatherForecastEntity weatherForecastEntity = anyWeatherForecastEntity(refId, responseId, description);        doReturn(weatherForecastEntity).when(weatherForecastRepository).save(any());        WeatherRequest weatherRequest = WeatherRequest.builder().city("city").country("country").build();        WeatherResponse result = weatherInternalService.getLiveData(weatherRequest);        assertThat(result.getDescription(), CoreMatchers.is(description));    }    private WeatherForecastEntity anyWeatherForecastEntity(final Long refId, final String responseId, final String description) {        WeatherForecastEntity weatherForecastEntity = new WeatherForecastEntity();        weatherForecastEntity.setRefId(refId);        weatherForecastEntity.setResponseId(responseId);        WeatherEntity weatherEntity = new WeatherEntity();        weatherEntity.setDescription(description);        weatherForecastEntity.getWeather().add(weatherEntity);        return weatherForecastEntity;    }}