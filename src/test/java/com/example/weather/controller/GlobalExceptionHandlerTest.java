package com.example.weather.controller;import com.example.weather.exception.ApiError;import com.example.weather.exception.DataNotFoundException;import com.example.weather.exception.DownstreamException;import com.example.weather.exception.RateLimitException;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.Spy;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.context.request.WebRequest;import javax.servlet.http.HttpServletRequest;import java.util.List;import static com.example.weather.exception.Status.*;import static org.hamcrest.CoreMatchers.is;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.notNullValue;import static org.mockito.ArgumentMatchers.any;import static org.springframework.http.HttpStatus.NO_CONTENT;@ExtendWith(MockitoExtension.class)class GlobalExceptionHandlerTest {    @Mock    private HttpServletRequest request;    @Mock    private MethodArgumentNotValidException methodArgumentNotValidException;    @Mock    private HttpHeaders httpHeaders;    @Mock    private WebRequest webRequest;    @Spy    @InjectMocks    private GlobalExceptionHandler handler;    @Test    public void handleDataNotFoundException_returnsError() {        ResponseEntity<ApiError> response = handler.handleDataNotFoundException(new DataNotFoundException(""), request);        assertThat(response.getStatusCode(), is(DATA_NOT_FOUND.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(DATA_NOT_FOUND.getErrorId()));        assertThat(response.getBody().getMessage(), is(DATA_NOT_FOUND.getErrorMessage()));    }    @Test    public void handleIllegalArgumentException_returnsError() {        ResponseEntity<ApiError> response = handler.handleIllegalArgumentException(new IllegalArgumentException(""), request);        assertThat(response.getStatusCode(), is(INVALID_REQUEST.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(INVALID_REQUEST.getErrorId()));        assertThat(response.getBody().getMessage(), is(INVALID_REQUEST.getErrorMessage()));    }    @Test    public void handleDownstreamException_whenHttpStatusPassed_shouldReturnsErrorBasedOnGivenStatus() {        DownstreamException downstreamException = new DownstreamException();        downstreamException.setHttpStatus(NO_CONTENT);        ResponseEntity<ApiError> response = handler.handleDownstreamException(downstreamException, request);        assertThat(response.getStatusCode(), is(NO_CONTENT_FOUND.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(NO_CONTENT_FOUND.getErrorId()));        assertThat(response.getBody().getMessage(), is(NO_CONTENT_FOUND.getErrorMessage()));    }    @Test    public void handleDownstreamException_whenNoHandledHttpStatusPassed_shouldReturnsServerError() {        DownstreamException downstreamException = new DownstreamException();        ResponseEntity<ApiError> response = handler.handleDownstreamException(downstreamException, request);        assertThat(response.getStatusCode(), is(SERVER_ERROR.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(SERVER_ERROR.getErrorId()));        assertThat(response.getBody().getMessage(), is(SERVER_ERROR.getErrorMessage()));    }    @Test    public void handleRateLimitException_returnsError() {        ResponseEntity<ApiError> response = handler.handleRateLimitException(new RateLimitException(), request);        assertThat(response.getStatusCode(), is(PASS_REQUEST_LIMIT.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(PASS_REQUEST_LIMIT.getErrorId()));        assertThat(response.getBody().getMessage(), is(PASS_REQUEST_LIMIT.getErrorMessage()));    }    @Test    public void handleException_whenExceptionWithNoHandlerRaised_returnsError() {        ResponseEntity<ApiError> response = handler.handleException(new Exception(), request);        assertThat(response.getStatusCode(), is(SERVER_ERROR.getHttpStatus()));        assertThat(response.getBody(), notNullValue());        assertThat(response.getBody().getErrorId(), is(SERVER_ERROR.getErrorId()));        assertThat(response.getBody().getMessage(), is(SERVER_ERROR.getErrorMessage()));    }    @Test    public void handleMethodArgumentNotValidException_returnsError() {        List<String> fieldNames = List.of("city");        Mockito.doReturn(fieldNames).when(handler).getFieldNames(any());        ResponseEntity<Object> response = handler.handleMethodArgumentNotValid(methodArgumentNotValidException, httpHeaders, HttpStatus.BAD_REQUEST, webRequest);        assertThat(response.getStatusCode(), is(VALIDATION_ERROR.getHttpStatus()));        ApiError body = (ApiError) response.getBody();        assertThat(body, notNullValue());        assertThat(body.getErrorId(), is(VALIDATION_ERROR.getErrorId()));        assertThat(body.getMessage(), is(VALIDATION_ERROR.getErrorMessage()));        assertThat(body.getMessageDetails(), is(fieldNames));    }}