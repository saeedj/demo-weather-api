package com.example.weather.service.internal;import com.example.weather.dto.WeatherExternalResponseDTO;import com.example.weather.exception.DataNotFoundException;import com.example.weather.model.WeatherRequest;import com.example.weather.model.WeatherResponse;import com.example.weather.repository.WeatherForecastEntity;import com.example.weather.repository.WeatherForecastRepository;import com.example.weather.service.external.WeatherExternalService;import lombok.AllArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.stereotype.Service;import java.util.Optional;import static java.util.Objects.isNull;@Service@AllArgsConstructorpublic class WeatherInternalService {    private final WeatherExternalService weatherExternalService;    private final WeatherForecastRepository weatherForecastRepository;    public WeatherResponse getLiveData(final WeatherRequest weatherRequest) {        //call external service        WeatherExternalResponseDTO weatherExternalResponseDTO = weatherExternalService.getFromExternalAPI(weatherRequest);        if (isNull(weatherExternalResponseDTO)) {            throw new DataNotFoundException("No data found");        }        // Map the external response to entity        ModelMapper modelMapper = new ModelMapper();        WeatherForecastEntity weatherForecastEntity = modelMapper.map(weatherExternalResponseDTO, WeatherForecastEntity.class);        Optional<WeatherForecastEntity> optionalData = weatherForecastRepository.findByResponseId(weatherForecastEntity.getResponseId());        WeatherForecastEntity data;        data = optionalData.orElseGet(() -> weatherForecastRepository.save(weatherForecastEntity));        return WeatherResponse.builder().description(data.getWeather().get(0).getDescription()).build();    }}