package com.example.weather.service.external;import com.example.weather.dto.WeatherExternalResponseDTO;import com.example.weather.exception.DownstreamException;import com.example.weather.model.BaseModel;import com.example.weather.model.WeatherRequest;import lombok.Getter;import lombok.Setter;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.web.reactive.function.client.WebClient;import java.time.Duration;@Service@Getter@Setterpublic class WeatherExternalService implements BaseExternalService {    @Value("${weather.external.api.url}")    private String url;    @Value("${weather.external.api.timeout}")    private Long timeout;    private final WebClient webClient = WebClient.builder().build();    @Override    public WeatherExternalResponseDTO getFromExternalAPI(BaseModel baseModel) throws DownstreamException {        WeatherRequest weatherRequest = (WeatherRequest) baseModel;        return webClient.get()                .uri(getUrl(), weatherRequest.getCity(), weatherRequest.getCountry())                .retrieve()                .onStatus(HttpStatus::isError, BaseExternalService::handleErrors)                .bodyToMono(WeatherExternalResponseDTO.class)                .block(Duration.ofSeconds(timeout));    }}