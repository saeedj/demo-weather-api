package com.example.weather.service;import com.example.weather.exception.RateLimitException;import io.github.bucket4j.Bucket;import io.github.bucket4j.Bucket4j;import lombok.Getter;import lombok.Setter;import org.springframework.stereotype.Service;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * A service to manage number of eligible calls to api based on api key and associated plans */@Service@Getter@Setterpublic class ApiUsageService {    private final Map<String, Bucket> cache = new ConcurrentHashMap<>();    private Bucket bucket;    public void checkRateLimit(String apiKey) {        bucket = resolveBucket(apiKey);        if (!bucket.tryConsume(1)) {            throw new RateLimitException();        }    }    public Bucket resolveBucket(String apiKey) {        return cache.computeIfAbsent(apiKey, this::newBucket);    }    private Bucket newBucket(String apiKey) {        ApiUsagePlan apiUsagePlan = ApiUsagePlan.resolvePlanFromApiKey(apiKey);        return Bucket4j.builder()                .addLimit(apiUsagePlan.getLimit())                .build();    }}