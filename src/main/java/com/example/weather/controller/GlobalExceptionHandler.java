package com.example.weather.controller;import com.example.weather.exception.*;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.context.request.WebRequest;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import javax.servlet.http.HttpServletRequest;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;@Slf4j@ControllerAdvicepublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {    @ExceptionHandler({DataNotFoundException.class})    public ResponseEntity<ApiError> handleDataNotFoundException(DataNotFoundException exception, HttpServletRequest request) {        log.error(exception.getMessage());        return new ResponseEntity<>(ApiError.buildErrorResponse(exception, Status.DATA_NOT_FOUND), Status.DATA_NOT_FOUND.getHttpStatus());    }    @ExceptionHandler({IllegalArgumentException.class})    public ResponseEntity<ApiError> handleIllegalArgumentException(IllegalArgumentException exception, HttpServletRequest request) {        return new ResponseEntity<>(ApiError.buildErrorResponse(exception, Status.INVALID_REQUEST), Status.INVALID_REQUEST.getHttpStatus());    }    @ExceptionHandler({DownstreamException.class})    public ResponseEntity<ApiError> handleDownstreamException(DownstreamException exception, HttpServletRequest request) {        ApiError apiError = null;        if (exception.getHttpStatus() == null) {            apiError = ApiError.buildErrorResponse(exception, Status.SERVER_ERROR);        } else if (exception.getHttpStatus().equals(HttpStatus.NO_CONTENT)) {            apiError = ApiError.buildErrorResponse(exception, Status.NO_CONTENT_FOUND);        } else if (exception.getHttpStatus().equals(HttpStatus.BAD_REQUEST)) {            apiError = ApiError.buildErrorResponse(exception, Status.INVALID_REQUEST);        } else if (exception.getHttpStatus().equals(HttpStatus.UNAUTHORIZED)) {            apiError = ApiError.buildErrorResponse(exception, Status.NO_ACCESS);        } else if (exception.getHttpStatus().equals(HttpStatus.NOT_FOUND)) {            apiError = ApiError.buildErrorResponse(exception, Status.DATA_NOT_FOUND);        } else if (exception.getHttpStatus().is5xxServerError()) {            apiError = ApiError.buildErrorResponse(exception, Status.SERVER_ERROR);        } else {            apiError = ApiError.buildErrorResponse(exception, Status.SERVER_ERROR);        }        log.error(apiError.toString());        return new ResponseEntity<>(apiError, apiError.getHttpStatus());    }    @ExceptionHandler({RateLimitException.class})    public ResponseEntity<ApiError> handleRateLimitException(RateLimitException exception, HttpServletRequest request) {        ApiError apiError = ApiError.buildErrorResponse(exception, Status.PASS_REQUEST_LIMIT);        log.error(apiError.toString());        return new ResponseEntity<>(apiError, Status.PASS_REQUEST_LIMIT.getHttpStatus());    }    @ExceptionHandler({Exception.class})    public ResponseEntity<ApiError> handleException(Exception exception, HttpServletRequest request) {        ApiError apiError = ApiError.buildErrorResponse(exception, Status.SERVER_ERROR);        log.error(apiError.toString());        return new ResponseEntity<>(apiError, Status.SERVER_ERROR.getHttpStatus());    }    @Override    protected ResponseEntity<Object> handleMethodArgumentNotValid(            MethodArgumentNotValidException exception, HttpHeaders headers,            HttpStatus status, WebRequest request) {        List<String> fieldNames = getFieldNames(exception);        ApiError apiError = ApiError.buildErrorResponse(exception, Status.VALIDATION_ERROR, fieldNames);        log.error(apiError.toString());        return new ResponseEntity<>(apiError, Status.VALIDATION_ERROR.getHttpStatus());    }    List<String> getFieldNames(MethodArgumentNotValidException exception) {        return exception.getBindingResult().getFieldErrors().stream().map(FieldError::getField).collect(Collectors.toCollection(ArrayList::new));    }}